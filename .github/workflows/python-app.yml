name: Python application

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: write  # Needed to push changes back

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest autopep8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if python -c "import torch; print(torch.cuda.is_available())" | grep True; then
          echo "GPU detected, installing PyTorch with CUDA..."
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
        else
          echo "No GPU detected, keeping CPU-only PyTorch..."
        fi

    - name: Auto-format with autopep8
      run: |
        # Automatically fix formatting issues detected by autopep8
        find . -name "*.py" -exec autopep8 --in-place --aggressive --aggressive {} \;

    - name: Commit changes if any
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        if [ -n "$(git status --porcelain)" ]; then
          git add .
          git commit -m "Auto-format code with autopep8"
          git push origin HEAD:master  # Specify branch to push to
        fi

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Enforce no lint errors for merge
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: false  # Stop if flake8 fails

    - name: Set PYTHONPATH to the root invERT directory
      run: |
        echo "PYTHONPATH=$(pwd)/invERT" >> $GITHUB_ENV

    - name: Test with pytest
      run: |
        cd invERT
        pytest
